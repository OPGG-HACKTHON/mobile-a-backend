// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["orderByRelation"]
}

enum Role {
  USER
  ADMIN
}

model Token {
  token     String    @id @unique
  User      User      @relation(fields: [userId], references: [id])
  userId    Int
  expireAt  DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model User {
  id              Int               @id @default(autoincrement())
  authFrom        String
  email           String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  role            Role              @default(USER)
  LOLAccount      LOLAccount?       @relation(fields: [LOLAccountId], references: [id])
  LOLAccountId    String?
  schoolId        String
  School          School            @relation(fields: [schoolId], references: [id])
  Token           Token[]
  LOLRankInSchool LOLRankInSchool[]

  @@unique([authFrom, email], name: "User_authFrom_email_uniqueConstraint")
}

model Region {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  School    School[]
}

model School {
  id               String             @id
  name             String
  division         String
  educationOffice  String
  address          String
  imageUrl         String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  Region           Region             @relation(fields: [regionId], references: [id])
  regionId         Int
  User             User[]
  LOLSummarySchool LOLSummarySchool[]
}

// SUMMONER-V4
model LOLAccount {
  id                 String               @id
  accountId          String
  puuid              String
  name               String
  profileIconId      Int
  summonerLevel      Int
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  User               User?
  LOLChampionMastery LOLChampionMastery[]
  LOLTier            LOLTier?
  LOLSummaryPersonal LOLSummaryPersonal[]
}

// data - ko_KR - champion
model LOLChampion {
  id                 String               @id
  name               String               @unique
  key                Int                  @unique
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  LOLSummaryPersonal LOLSummaryPersonal[]
  LOLSummarySchool   LOLSummarySchool[]
  LOLChampionMastery LOLChampionMastery[]
}

// LoL Rank in School
model LOLRankInSchool {
  id                   Int                @id @default(autoincrement())
  prevRank             Int?
  User                 User               @relation(fields: [userId], references: [id])
  userId               Int
  LOLSummaryPersonal   LOLSummaryPersonal @relation(fields: [LOLSummaryPersonalId], references: [id])
  LOLSummaryPersonalId Int
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
}

// LoL summary Personal
model LOLSummaryPersonal {
  id                  Int               @id @default(autoincrement())
  LOLAccount          LOLAccount        @relation(fields: [LOLAccountId], references: [id])
  LOLAccountId        String
  LOLSummaryElement   LOLSummaryElement @relation(fields: [LOLSummaryElementId], references: [id])
  LOLSummaryElementId Int
  LOLChampion         LOLChampion?      @relation(fields: [LOLChampionId], references: [id])
  LOLChampionId       String?
  value               String
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  LOLRankInSchool     LOLRankInSchool?

  @@unique([LOLAccountId, LOLSummaryElementId, LOLChampionId], name: "LOLSummaryPersonal_LOLAccountId_LOLSummaryElementId_LOLChampionId_uniqueConstraint")
}

// LoL summary School
model LOLSummarySchool {
  id                  Int               @id @default(autoincrement())
  School              School            @relation(fields: [SchoolId], references: [id])
  SchoolId            String
  LOLSummaryElement   LOLSummaryElement @relation(fields: [LOLSummaryElementId], references: [id])
  LOLSummaryElementId Int
  LOLChampion         LOLChampion?      @relation(fields: [LOLChampionId], references: [id])
  LOLChampionId       String?
  value               String
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt

  @@unique([SchoolId, LOLSummaryElementId, LOLChampionId], name: "LOLSummarySchool_SchoolId_LOLSummaryElementId_LOLChampionId_uniqueConstraint")
}

// LoL Category
model LOLSummaryElement {
  id                    Int                  @id @default(autoincrement())
  LOLMatchFieldName     String?
  LOLMatchFieldCategory String?
  LOLMatchFieldKoName   String?
  LOLMatchFieldDataType String?              @default("Int")
  valueDataType         String               @default("Int")
  calculateType         String
  sortType              String
  exposureName          String
  description           String?
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  LOLSummaryPersonal    LOLSummaryPersonal[]
  LOLSummarySchool      LOLSummarySchool[]
}

// only RANKED_SOLO_5x5
// LEAGUE-V4 - /lol/league/v4/entries/by-summoner/{encryptedSummonerId}
model LOLTier {
  id           Int        @id @default(autoincrement())
  tier         String
  rank         String
  leaguePoints Int
  wins         Int
  losses       Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  LOLAccount   LOLAccount @relation(fields: [LOLAccountId], references: [id])
  LOLAccountId String     @unique
}

// CHAMPION-MASTERY-V4 - /lol/champion-mastery/v4/champion-masteries/by-summoner/{encryptedSummonerId}
model LOLChampionMastery {
  id             Int         @id @default(autoincrement())
  LOLChampion    LOLChampion @relation(fields: [LOLChampionId], references: [id])
  LOLChampionId  String
  championPoints Int
  lastPlayTime   DateTime
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  LOLAccount     LOLAccount  @relation(fields: [LOLAccountId], references: [id])
  LOLAccountId   String

  @@unique([LOLChampionId, LOLAccountId], name: "LOLChampionMastery_LOLChampionId_LOLAccountId_uniqueConstraint")
}

// MATCH-V5  - /lol/match/v5/matches/{matchId}
model LOLMatch {
  id        String   @id
  metadata  Json
  info      Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
