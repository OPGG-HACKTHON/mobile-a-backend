// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  USER
  ADMIN
}

model Token {
  token     String    @id
  User      User      @relation(fields: [userId], references: [id])
  userId    Int
  expireAt  DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model User {
  id           Int         @id @default(autoincrement())
  authFrom     String
  email        String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  role         Role        @default(USER)
  LOLAccount   LOLAccount? @relation(fields: [LOLAccountId], references: [id])
  LOLAccountId String?
  schoolId     String
  School       School      @relation(fields: [schoolId], references: [id])
  Token        Token[]

  @@unique([authFrom, email], name: "User_authFrom_email_uniqueConstraint")
}

model Region {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  School    School[]
}

model School {
  id               String             @id
  name             String
  division         String
  educationOffice  String
  address          String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  Region           Region             @relation(fields: [regionId], references: [id])
  regionId         Int
  User             User[]
  LOLSummarySchool LOLSummarySchool[]
}

// SUMMONER-V4
model LOLAccount {
  id                 String               @id
  accountId          String
  puuid              String
  name               String
  profileIconId      Int
  summonerLevel      Int
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  User               User?
  LOLChampionMastery LOLChampionMastery?
  LOLTier            LOLTier?
  LOLSummaryPersonal LOLSummaryPersonal[]
}

// LoL summary Personal
model LOLSummaryPersonal {
  LOLAccount          LOLAccount        @relation(fields: [LOLAccountId], references: [id])
  LOLAccountId        String
  LOLSummaryElement   LOLSummaryElement @relation(fields: [LOLSummaryElementId], references: [id])
  LOLSummaryElementId Int
  championId          Int?
  value               String
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt

  @@id([LOLAccountId, LOLSummaryElementId])
}

// LoL summary School
model LOLSummarySchool {
  School              School            @relation(fields: [SchoolId], references: [id])
  SchoolId            String
  LOLSummaryElement   LOLSummaryElement @relation(fields: [LOLSummaryElementId], references: [id])
  LOLSummaryElementId Int
  championId          Int?
  value               String
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt

  @@id([SchoolId, LOLSummaryElementId])
}

// LoL Category
model LOLSummaryElement {
  id                 Int                  @id @default(autoincrement())
  LOLMatchFieldName  String?
  valueDataType      String               @default("Int")
  calculateType      String
  sortType           String
  exposureName       String
  description        String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  LOLSummaryPersonal LOLSummaryPersonal[]
  LOLSummarySchool   LOLSummarySchool[]
}

// only RANKED_SOLO_5x5
// LEAGUE-V4 - /lol/league/v4/entries/by-summoner/{encryptedSummonerId}
model LOLTier {
  id           Int        @id @default(autoincrement())
  tier         String
  rank         String
  leaguePoints Int
  wins         Int
  losses       Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  LOLAccount   LOLAccount @relation(fields: [LOLAccountId], references: [id])
  LOLAccountId String     @unique
}

// CHAMPION-MASTERY-V4 - /lol/champion-mastery/v4/champion-masteries/by-summoner/{encryptedSummonerId}
model LOLChampionMastery {
  id             Int        @id @default(autoincrement())
  championId     Int
  championPoints Int
  lastPlayTime   DateTime
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  LOLAccount     LOLAccount @relation(fields: [LOLAccountId], references: [id])
  LOLAccountId   String
}

// MATCH-V5  - /lol/match/v5/matches/{matchId}
model LOLMatch {
  id        String   @id
  metadata  Json
  info      Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
